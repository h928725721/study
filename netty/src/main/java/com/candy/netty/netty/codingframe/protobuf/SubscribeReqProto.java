package com.candy.netty.netty.codingframe.protobuf;// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: subscribe.proto

import com.google.protobuf.*;

public final class SubscribeReqProto {
  private SubscribeReqProto() {}
  public static void registerAllExtensions(
      ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      ExtensionRegistry registry) {
    registerAllExtensions(
        (ExtensionRegistryLite) registry);
  }
  public interface SubscribeReqOrBuilder extends
      // @@protoc_insertion_point(interface_extends:SubscribeReq)
          MessageOrBuilder {

    /**
     * <code>int32 subReqID = 1;</code>
     * @return The subReqID.
     */
    int getSubReqID();

    /**
     * <code>string userName = 2;</code>
     * @return The userName.
     */
    String getUserName();
    /**
     * <code>string userName = 2;</code>
     * @return The bytes for userName.
     */
    ByteString
        getUserNameBytes();

    /**
     * <code>string productName = 3;</code>
     * @return The productName.
     */
    String getProductName();
    /**
     * <code>string productName = 3;</code>
     * @return The bytes for productName.
     */
    ByteString
        getProductNameBytes();

    /**
     * <code>string address = 4;</code>
     * @return The address.
     */
    String getAddress();
    /**
     * <code>string address = 4;</code>
     * @return The bytes for address.
     */
    ByteString
        getAddressBytes();
  }
  /**
   * Protobuf type {@code SubscribeReq}
   */
  public static final class SubscribeReq extends
          GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:SubscribeReq)
      SubscribeReqOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use SubscribeReq.newBuilder() to construct.
    private SubscribeReq(GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private SubscribeReq() {
      userName_ = "";
      productName_ = "";
      address_ = "";
    }

    @Override
    @SuppressWarnings({"unused"})
    protected Object newInstance(
        UnusedPrivateParameter unused) {
      return new SubscribeReq();
    }

    public static final Descriptors.Descriptor
        getDescriptor() {
      return SubscribeReqProto.internal_static_SubscribeReq_descriptor;
    }

    @Override
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return SubscribeReqProto.internal_static_SubscribeReq_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              SubscribeReq.class, Builder.class);
    }

    public static final int SUBREQID_FIELD_NUMBER = 1;
    private int subReqID_ = 0;
    /**
     * <code>int32 subReqID = 1;</code>
     * @return The subReqID.
     */
    @Override
    public int getSubReqID() {
      return subReqID_;
    }

    public static final int USERNAME_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private volatile Object userName_ = "";
    /**
     * <code>string userName = 2;</code>
     * @return The userName.
     */
    @Override
    public String getUserName() {
      Object ref = userName_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        ByteString bs = 
            (ByteString) ref;
        String s = bs.toStringUtf8();
        userName_ = s;
        return s;
      }
    }
    /**
     * <code>string userName = 2;</code>
     * @return The bytes for userName.
     */
    @Override
    public ByteString
        getUserNameBytes() {
      Object ref = userName_;
      if (ref instanceof String) {
        ByteString b = 
            ByteString.copyFromUtf8(
                (String) ref);
        userName_ = b;
        return b;
      } else {
        return (ByteString) ref;
      }
    }

    public static final int PRODUCTNAME_FIELD_NUMBER = 3;
    @SuppressWarnings("serial")
    private volatile Object productName_ = "";
    /**
     * <code>string productName = 3;</code>
     * @return The productName.
     */
    @Override
    public String getProductName() {
      Object ref = productName_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        ByteString bs = 
            (ByteString) ref;
        String s = bs.toStringUtf8();
        productName_ = s;
        return s;
      }
    }
    /**
     * <code>string productName = 3;</code>
     * @return The bytes for productName.
     */
    @Override
    public ByteString
        getProductNameBytes() {
      Object ref = productName_;
      if (ref instanceof String) {
        ByteString b = 
            ByteString.copyFromUtf8(
                (String) ref);
        productName_ = b;
        return b;
      } else {
        return (ByteString) ref;
      }
    }

    public static final int ADDRESS_FIELD_NUMBER = 4;
    @SuppressWarnings("serial")
    private volatile Object address_ = "";
    /**
     * <code>string address = 4;</code>
     * @return The address.
     */
    @Override
    public String getAddress() {
      Object ref = address_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        ByteString bs = 
            (ByteString) ref;
        String s = bs.toStringUtf8();
        address_ = s;
        return s;
      }
    }
    /**
     * <code>string address = 4;</code>
     * @return The bytes for address.
     */
    @Override
    public ByteString
        getAddressBytes() {
      Object ref = address_;
      if (ref instanceof String) {
        ByteString b = 
            ByteString.copyFromUtf8(
                (String) ref);
        address_ = b;
        return b;
      } else {
        return (ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @Override
    public void writeTo(CodedOutputStream output)
                        throws java.io.IOException {
      if (subReqID_ != 0) {
        output.writeInt32(1, subReqID_);
      }
      if (!GeneratedMessageV3.isStringEmpty(userName_)) {
        GeneratedMessageV3.writeString(output, 2, userName_);
      }
      if (!GeneratedMessageV3.isStringEmpty(productName_)) {
        GeneratedMessageV3.writeString(output, 3, productName_);
      }
      if (!GeneratedMessageV3.isStringEmpty(address_)) {
        GeneratedMessageV3.writeString(output, 4, address_);
      }
      getUnknownFields().writeTo(output);
    }

    @Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (subReqID_ != 0) {
        size += CodedOutputStream
          .computeInt32Size(1, subReqID_);
      }
      if (!GeneratedMessageV3.isStringEmpty(userName_)) {
        size += GeneratedMessageV3.computeStringSize(2, userName_);
      }
      if (!GeneratedMessageV3.isStringEmpty(productName_)) {
        size += GeneratedMessageV3.computeStringSize(3, productName_);
      }
      if (!GeneratedMessageV3.isStringEmpty(address_)) {
        size += GeneratedMessageV3.computeStringSize(4, address_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @Override
    public boolean equals(final Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof SubscribeReq)) {
        return super.equals(obj);
      }
      SubscribeReq other = (SubscribeReq) obj;

      if (getSubReqID()
          != other.getSubReqID()) return false;
      if (!getUserName()
          .equals(other.getUserName())) return false;
      if (!getProductName()
          .equals(other.getProductName())) return false;
      if (!getAddress()
          .equals(other.getAddress())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + SUBREQID_FIELD_NUMBER;
      hash = (53 * hash) + getSubReqID();
      hash = (37 * hash) + USERNAME_FIELD_NUMBER;
      hash = (53 * hash) + getUserName().hashCode();
      hash = (37 * hash) + PRODUCTNAME_FIELD_NUMBER;
      hash = (53 * hash) + getProductName().hashCode();
      hash = (37 * hash) + ADDRESS_FIELD_NUMBER;
      hash = (53 * hash) + getAddress().hashCode();
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static SubscribeReq parseFrom(
        java.nio.ByteBuffer data)
        throws InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SubscribeReq parseFrom(
        java.nio.ByteBuffer data,
        ExtensionRegistryLite extensionRegistry)
        throws InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SubscribeReq parseFrom(
        ByteString data)
        throws InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SubscribeReq parseFrom(
        ByteString data,
        ExtensionRegistryLite extensionRegistry)
        throws InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SubscribeReq parseFrom(byte[] data)
        throws InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SubscribeReq parseFrom(
        byte[] data,
        ExtensionRegistryLite extensionRegistry)
        throws InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SubscribeReq parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static SubscribeReq parseFrom(
        java.io.InputStream input,
        ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static SubscribeReq parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static SubscribeReq parseDelimitedFrom(
        java.io.InputStream input,
        ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static SubscribeReq parseFrom(
        CodedInputStream input)
        throws java.io.IOException {
      return GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static SubscribeReq parseFrom(
        CodedInputStream input,
        ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(SubscribeReq prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code SubscribeReq}
     */
    public static final class Builder extends
        GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:SubscribeReq)
        SubscribeReqOrBuilder {
      public static final Descriptors.Descriptor
          getDescriptor() {
        return SubscribeReqProto.internal_static_SubscribeReq_descriptor;
      }

      @Override
      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return SubscribeReqProto.internal_static_SubscribeReq_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                SubscribeReq.class, Builder.class);
      }

      // Construct using SubscribeReqProto.SubscribeReq.newBuilder()
      private Builder() {

      }

      private Builder(
          BuilderParent parent) {
        super(parent);

      }
      @Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        subReqID_ = 0;
        userName_ = "";
        productName_ = "";
        address_ = "";
        return this;
      }

      @Override
      public Descriptors.Descriptor
          getDescriptorForType() {
        return SubscribeReqProto.internal_static_SubscribeReq_descriptor;
      }

      @Override
      public SubscribeReq getDefaultInstanceForType() {
        return SubscribeReq.getDefaultInstance();
      }

      @Override
      public SubscribeReq build() {
        SubscribeReq result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @Override
      public SubscribeReq buildPartial() {
        SubscribeReq result = new SubscribeReq(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(SubscribeReq result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.subReqID_ = subReqID_;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.userName_ = userName_;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.productName_ = productName_;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.address_ = address_;
        }
      }

      @Override
      public Builder mergeFrom(Message other) {
        if (other instanceof SubscribeReq) {
          return mergeFrom((SubscribeReq)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(SubscribeReq other) {
        if (other == SubscribeReq.getDefaultInstance()) return this;
        if (other.getSubReqID() != 0) {
          setSubReqID(other.getSubReqID());
        }
        if (!other.getUserName().isEmpty()) {
          userName_ = other.userName_;
          bitField0_ |= 0x00000002;
          onChanged();
        }
        if (!other.getProductName().isEmpty()) {
          productName_ = other.productName_;
          bitField0_ |= 0x00000004;
          onChanged();
        }
        if (!other.getAddress().isEmpty()) {
          address_ = other.address_;
          bitField0_ |= 0x00000008;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @Override
      public final boolean isInitialized() {
        return true;
      }

      @Override
      public Builder mergeFrom(
          CodedInputStream input,
          ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                subReqID_ = input.readInt32();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 18: {
                userName_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 26: {
                productName_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000004;
                break;
              } // case 26
              case 34: {
                address_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000008;
                break;
              } // case 34
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int subReqID_ ;
      /**
       * <code>int32 subReqID = 1;</code>
       * @return The subReqID.
       */
      @Override
      public int getSubReqID() {
        return subReqID_;
      }
      /**
       * <code>int32 subReqID = 1;</code>
       * @param value The subReqID to set.
       * @return This builder for chaining.
       */
      public Builder setSubReqID(int value) {

        subReqID_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>int32 subReqID = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearSubReqID() {
        bitField0_ = (bitField0_ & ~0x00000001);
        subReqID_ = 0;
        onChanged();
        return this;
      }

      private Object userName_ = "";
      /**
       * <code>string userName = 2;</code>
       * @return The userName.
       */
      public String getUserName() {
        Object ref = userName_;
        if (!(ref instanceof String)) {
          ByteString bs =
              (ByteString) ref;
          String s = bs.toStringUtf8();
          userName_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      /**
       * <code>string userName = 2;</code>
       * @return The bytes for userName.
       */
      public ByteString
          getUserNameBytes() {
        Object ref = userName_;
        if (ref instanceof String) {
          ByteString b = 
              ByteString.copyFromUtf8(
                  (String) ref);
          userName_ = b;
          return b;
        } else {
          return (ByteString) ref;
        }
      }
      /**
       * <code>string userName = 2;</code>
       * @param value The userName to set.
       * @return This builder for chaining.
       */
      public Builder setUserName(
          String value) {
        if (value == null) { throw new NullPointerException(); }
        userName_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>string userName = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearUserName() {
        userName_ = getDefaultInstance().getUserName();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }
      /**
       * <code>string userName = 2;</code>
       * @param value The bytes for userName to set.
       * @return This builder for chaining.
       */
      public Builder setUserNameBytes(
          ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        userName_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }

      private Object productName_ = "";
      /**
       * <code>string productName = 3;</code>
       * @return The productName.
       */
      public String getProductName() {
        Object ref = productName_;
        if (!(ref instanceof String)) {
          ByteString bs =
              (ByteString) ref;
          String s = bs.toStringUtf8();
          productName_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      /**
       * <code>string productName = 3;</code>
       * @return The bytes for productName.
       */
      public ByteString
          getProductNameBytes() {
        Object ref = productName_;
        if (ref instanceof String) {
          ByteString b = 
              ByteString.copyFromUtf8(
                  (String) ref);
          productName_ = b;
          return b;
        } else {
          return (ByteString) ref;
        }
      }
      /**
       * <code>string productName = 3;</code>
       * @param value The productName to set.
       * @return This builder for chaining.
       */
      public Builder setProductName(
          String value) {
        if (value == null) { throw new NullPointerException(); }
        productName_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>string productName = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearProductName() {
        productName_ = getDefaultInstance().getProductName();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }
      /**
       * <code>string productName = 3;</code>
       * @param value The bytes for productName to set.
       * @return This builder for chaining.
       */
      public Builder setProductNameBytes(
          ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        productName_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }

      private Object address_ = "";
      /**
       * <code>string address = 4;</code>
       * @return The address.
       */
      public String getAddress() {
        Object ref = address_;
        if (!(ref instanceof String)) {
          ByteString bs =
              (ByteString) ref;
          String s = bs.toStringUtf8();
          address_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      /**
       * <code>string address = 4;</code>
       * @return The bytes for address.
       */
      public ByteString
          getAddressBytes() {
        Object ref = address_;
        if (ref instanceof String) {
          ByteString b = 
              ByteString.copyFromUtf8(
                  (String) ref);
          address_ = b;
          return b;
        } else {
          return (ByteString) ref;
        }
      }
      /**
       * <code>string address = 4;</code>
       * @param value The address to set.
       * @return This builder for chaining.
       */
      public Builder setAddress(
          String value) {
        if (value == null) { throw new NullPointerException(); }
        address_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <code>string address = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearAddress() {
        address_ = getDefaultInstance().getAddress();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }
      /**
       * <code>string address = 4;</code>
       * @param value The bytes for address to set.
       * @return This builder for chaining.
       */
      public Builder setAddressBytes(
          ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        address_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      @Override
      public final Builder setUnknownFields(
          final UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @Override
      public final Builder mergeUnknownFields(
          final UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:SubscribeReq)
    }

    // @@protoc_insertion_point(class_scope:SubscribeReq)
    private static final SubscribeReq DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new SubscribeReq();
    }

    public static SubscribeReq getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final Parser<SubscribeReq>
        PARSER = new AbstractParser<SubscribeReq>() {
      @Override
      public SubscribeReq parsePartialFrom(
          CodedInputStream input,
          ExtensionRegistryLite extensionRegistry)
          throws InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static Parser<SubscribeReq> parser() {
      return PARSER;
    }

    @Override
    public Parser<SubscribeReq> getParserForType() {
      return PARSER;
    }

    @Override
    public SubscribeReq getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final Descriptors.Descriptor
    internal_static_SubscribeReq_descriptor;
  private static final 
    GeneratedMessageV3.FieldAccessorTable
      internal_static_SubscribeReq_fieldAccessorTable;

  public static Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  Descriptors.FileDescriptor
      descriptor;
  static {
    String[] descriptorData = {
      "\n\017subscribe.proto\"X\n\014SubscribeReq\022\020\n\010sub" +
      "ReqID\030\001 \001(\005\022\020\n\010userName\030\002 \001(\t\022\023\n\013product" +
      "Name\030\003 \001(\t\022\017\n\007address\030\004 \001(\tB\023B\021Subscribe" +
      "ReqProtob\006proto3"
    };
    descriptor = Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new Descriptors.FileDescriptor[] {
        });
    internal_static_SubscribeReq_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_SubscribeReq_fieldAccessorTable = new
      GeneratedMessageV3.FieldAccessorTable(
        internal_static_SubscribeReq_descriptor,
        new String[] { "SubReqID", "UserName", "ProductName", "Address", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
